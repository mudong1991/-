一、继承
	- 如果类A是类B的父类，而类B是类C的父类，我们也称C是A的子类，类C是从类A继承而来的。在Java中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类
	- 继承中最常使用的两个关键字是extends和implements。
	- 这两个关键字的使用决定了一个对象和另一个对象是否是IS-A(是一个)关系。
	- 通过使用这两个关键字，我们能实现一个对象获取另一个对象的属性。
	- 所有Java的类均是由java.lang.Object类继承而来的，所以Object是所有类的祖先类，而除了Object外，所有类必须有一个父类。 
	
	1、IS-A关系
		IS-A就是说：一个对象是另一个对象的一个分类
		通过使用关键字extends，子类可以继承父类的除private属性外所有的属性。
	
	2、instanceof关键字
		可以用instanceof 运算符来检验是否是一个类的一个实例
	
	3、HAS-A关系
		HAS-A代表类和它的成员之间的从属关系。这有助于代码的重用和减少代码的错误。
	
	一般我们继承基本类和抽象类用extends关键字，实现接口类的继承用implements关键字。
	
二、重写(Override)与重载(Overload)

	1、重写（Override）
		重写是子类对父类的允许访问的方法的实现过程进行重新编写！返回值和形参都不能改变。即外壳不变，核心重写！
		重写的好处在于子类可以根据需要，定义特定于自己的行为。
		也就是说子类能够根据需要实现父类的方法。
		在面向对象原则里，重写意味着可以重写任何现有方法。实例如下：
	
	2、重载（Overload）
		重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型呢？可以相同也可以不同。
		每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。
		只能重载构造函数
		
		重载规则
			被重载的方法必须改变参数列表；
			被重载的方法可以改变返回类型；
			被重载的方法可以改变访问修饰符；
			被重载的方法可以声明新的或更广的检查异常；
			方法能够在同一个类中或者在一个子类中被重载。
	3、重写与重载的区别
		区别点 	    重载方法 	重写方法
		参数列表 	必须修改 	一定不能修改
		返回类型 	可以修改 	一定不能修改
		异常 	可以修改 	可以减少或删除，一定不能抛出新的或者更广的异常
		访问 	可以修改 	一定不能做更严格的限制（可以降低限制） 

三、多态
	- 多态是同一个行为具有多个不同表现形式或形态的能力。
	- 多态性是对象多种表现形式的体现。
	- 比如我们说"宠物"这个对象，它就有很多不同的表达或实现，比如有小猫、小狗、蜥蜴等等。那么我到宠物店说"请给我一只宠物"，服务员给我小猫、小狗或者蜥蜴都可以，我们就说"宠物"这个对象就具备多态性。
	例如：
	public interface Vegetarian{}
	public class Animal{}
	public class Deer extends Animal implements Vegetarian{}
	因为Deer类具有多重继承，所以它具有多态性。以上实例解析如下： 
	    一个 Deer IS-A（是一个） Animal
		一个 Deer IS-A（是一个） Vegetarian
		一个 Deer IS-A（是一个） Deer
		一个 Deer IS-A（是一个）Object
	当我们将引用型变量应用于Deer对象的引用时，下面的声明是合法的：
	Deer d = new Deer();
	Animal a = d;
	Vegetarian v = d;
	Object o = d;

	所有的引用型变量d,a,v,o都指向堆中相同的Deer对象。

四、抽象类
	- 在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。 
	- 抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。
	- 由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。
	- 父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。
	
	1、抽象类
	使用abstract clss来定义抽象类
	
	2、抽象方法
	使用abstract 修饰符
	声明抽象方法会造成以下两个结果：
		- 如果一个类包含抽象方法，那么该类必须是抽象类。
		- 任何子类必须重写父类的抽象方法，或者声明自身为抽象类。
		
五、封装
	- 在面向对象程式设计方法中，封装（英语：Encapsulation）是指，一种将抽象性函式接口的实作细节部份包装、隐藏起来的方法。
	- 封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。
	- 要访问该类的代码和数据，必须通过严格的接口控制。
	- 封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。
	- 适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。
	- 通常情况下，这些方法被称为getter和setter方法。
	因此，任何要访问类中私有成员变量的类都要通过这些getter和setter方法。

六、接口
	- 接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。
	- 接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。
	- 接口与类的区别：
		接口不能用于实例化对象。
		接口没有构造方法。
		接口中所有的方法必须是抽象方法。
		接口不能包含成员变量，除了static和final变量。
		接口不是被类继承了，而是要被类实现。
		接口支持多重继承。
	1、接口声明
		接口的声明语法格式如下：
		[可见度] interface 接口名称 [extends 其他的类名] {
				// 声明变量
				// 抽象方法
		}
	2、接口实现
		实现一个接口的语法，可以使用这个公式：
		... implements 接口名称[, 其他接口, 其他接口..., ...] ...
		在实现接口的时候，也要注意一些规则：
			一个类可以同时实现多个接口。
			一个类只能继承一个类，但是能实现多个接口。
			一个接口能继承另一个接口，这和类之间的继承比较相似。
	3、接口继承
		一个接口能继承另一个接口，和类之间的继承方式比较相似。接口的继承使用extends关键字，子接口继承父接口的方法。
	4、标记接口
		没有任何方法和属性的接口。主要有两种目的：
		- 建立一个公共的父接口：
			正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。
		- 向一个类添加数据类型：
			这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。
七、包
	为了更好地组织类，Java提供了包机制，用于区别类名的命名空间。
	包的作用
		- 把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。
		- 如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。
		- 包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。
	1、创建包
		通常使用小写的字母来命名避免与类、接口名字的冲突。 
	2、import关键字
		为了能够使用某一个包的成员，我们需要在 Java 程序中明确导入该包。使用"import"语句可完成此功能。 
		在 java 源文件中 import 语句应位于 package 语句之后，所有类的定义之前，可以没有，也可以有多条，其语法格式为：
				import package1[.package2…].(classname|*);
		如果在一个包中，一个类想要使用本包中的另一个类，那么该包名可以省略。 