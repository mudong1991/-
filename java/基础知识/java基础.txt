一、基本数据类型
	Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。
	1、byte：
		byte数据类型是8位、有符号的，以二进制补码表示的整数；
		最小值是-128（-2^7）；
		最大值是127（2^7-1）；
		默认值是0；
		byte类型用在大型数组中节约空间，主要代替整数，因为byte变量占用的空间只有int类型的四分之一；
		例子：byte a = 100，byte b = -50。
	2、short：
		short数据类型是16位、有符号的以二进制补码表示的整数
		最小值是-32768（-2^15）；
		最大值是32767（2^15 - 1）；
		Short数据类型也可以像byte那样节省空间。一个short变量是int型变量所占空间的二分之一；
		默认值是0；
		例子：short s = 1000，short r = -20000。
	3、int：
		int数据类型是32位、有符号的以二进制补码表示的整数；
		最小值是-2,147,483,648（-2^31）；
		最大值是2,147,485,647（2^31 - 1）；
		一般地整型变量默认为int类型；
		默认值是0；
		例子：int a = 100000, int b = -200000。
	4、long：
		long数据类型是64位、有符号的以二进制补码表示的整数；
		最小值是-9,223,372,036,854,775,808（-2^63）；
		最大值是9,223,372,036,854,775,807（2^63 -1）；
		这种类型主要使用在需要比较大整数的系统上；
		默认值是0L；
		例子： long a = 100000L，int b = -200000L。
	5、float：
		float数据类型是单精度、32位、符合IEEE 754标准的浮点数；
		float在储存大型浮点数组的时候可节省内存空间；
		默认值是0.0f；
		浮点数不能用来表示精确的值，如货币；
		例子：float f1 = 234.5f。
	6、double：
		double数据类型是双精度、64位、符合IEEE 754标准的浮点数；
		浮点数的默认类型为double类型；
		double类型同样不能表示精确的值，如货币；
		默认值是0.0f；
		例子：double d1 = 123.4。
	7、boolean：
		boolean数据类型表示一位的信息；
		只有两个取值：true和false；
		这种类型只作为一种标志来记录true/false情况；
		默认值是false；
		例子：boolean one = true。
	8、char：
		char类型是一个单一的16位Unicode字符；
		最小值是’\u0000’（即为0）；
		最大值是’\uffff’（即为65,535）；
		char数据类型可以储存任何字符；
		例子：char letter = ‘A’。

二、变量类型
	Java语言支持的变量类型有：
		局部变量
		成员变量
		类变量
		
	1、局部变量
		局部变量声明在方法、构造方法或者语句块中；
		局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；
		访问修饰符不能用于局部变量；
		局部变量只在声明它的方法、构造方法或者语句块中可见；
		局部变量是在栈上分配的。
		局部变量没有默认值，所以局部变量量被声明后，必须经过初始化，才可以使用。
		
	2、实例变量
		实例变量声明在一个类中，但在方法、构造方法和语句块之外；
		当一个对象被实例化之后，每个实例变量的值就跟着确定；
		实例变量在对象创建的时候创建，在对象被销毁的时候销毁；
		实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；
		实例变量可以声明在使用前或者使用后；
		访问修饰符可以修饰实例变量；
		实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；
		实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；
		实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。
	
	3、类变量（静态变量）
		类变量也称为静态变量，在类中以static关键字声明，但必须在方法构造方法和语句块之外。
		无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。
		静态变量除了被声明为常量外很少使用。常量是指声明为publc/private，final和static类型的变量。常量初始化后不可改变。
		静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。
		静态变量在程序开始时创建，在程序结束时销毁。
		与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。
		默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。
		此外，静态变量还可以在静态语句块中初始化。
		静态变量可以通过：ClassName.VariableName的方式访问。
		类变量被声明为public static final类型时，类变量名称必须使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。

三、修饰符
	Java语言提供了很多修饰符，主要分为以下两类：
		访问修饰符
		非访问修饰符
		
	1、访问控制修饰符
		Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java支持4种不同的访问权限。
		- 默认的，也称为default，在同一包内可见，不使用任何修饰符。
		- 私有的，以private修饰符指定，在同一类内可见。
		- 共有的，以public修饰符指定，对所有类可见。
		- 受保护的，以protected修饰符指定，对同一包内的类和所有子类可见。
	
	2、非访问控制修饰符
		为了实现一些其他的功能，Java也提供了许多非访问修饰符。
		- static修饰符，用来创建类方法和类变量。
		- Final修饰符，用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。
		- Abstract修饰符，用来创建抽象类和抽象方法。
		- Synchronized和volatile修饰符，主要用于线程的编程。
		
四、循环结构
	Java中有三种主要的循环结构：
		while循环
		do…while循环
		for循环	
	1、while循环
		while(布尔表达式){
		}
	2、do...while循环
		对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。do…while循环和while循环相似，
		不同的是，do…while循环至少会执行一次。
		do{
			// 代码语句
		}while(布尔表达式)
	3、 for循环
		虽然所有循环结构都可以用while或者do...while表示，但Java提供了另一种语句 ―― for循环，使一些循环结构变得更加简单。 
		for(初始化; 布尔表达式; 更新) {
			//代码语句
		}
	break: 停止循环 
	continue：跳过本次，继续下次
	
五、分支结构
	Java有两种分支结构：
		if语句
		switch语句
		
	1、if 语句	
		if(布尔表达式)
		{
		   //如果布尔表达式为true将执行的语句
		}
		
	2、if...else语句
		if(布尔表达式){
		   //如果布尔表达式的值为true
		}else{
		   //如果布尔表达式的值为false
		}
		
	3、if...else if...else
		if(布尔表达式 1){
		   //如果布尔表达式 1的值为true执行代码
		}else if(布尔表达式 2){
		   //如果布尔表达式 2的值为true执行代码
		}else if(布尔表达式 3){
		   //如果布尔表达式 3的值为true执行代码
		}else {
		   //如果以上布尔表达式都不为true执行代码
		}
		
	4、switch语句
		switch(expression){
			case value :
			   //语句
			   break; //可选
			case value :
			   //语句
			   break; //可选
			//你可以有任意数量的case语句
			default : //可选
			   //语句
		}
	
六、Number数字类
	Integer a = new Integer("123");
	Integer a = 123;
	
	关于Number的方法：
	1	xxxValue()        将number对象转换为xxx数据类型的值并返回。
	2	compareTo()       将number对象与参数比较。
	3	equals()          判断number对象是否与参数相等。
	4	valueOf()         返回一个Integer对象指定的内置数据类型
	5	toString()        以字符串形式返回值。
	6	parseInt()        将字符串解析为int类型。
	7	abs()             返回参数的绝对值。
	8	ceil()            对整形变量向左取整，返回类型为double型。
	9	floor()           对整型变量向右取整。返回类型为double类型。
	10	rint()            返回与参数最接近的整数。返回类型为double。
	11	round()           返回一个最接近的int、long型值。
	12	min()             返回两个参数中的最小值。
	13	max()             返回两个参数中的最大值。
	14	exp()             返回自然数底数e的参数次方。
	15	log()             返回参数的自然数底数的对数值。
	16	pow()             返回第一个参数的第二个参数次方。
	17	sqrt()            求参数的算术平方根。
	18	sin()             求指定double类型参数的正弦值。
	19	cos()             求指定double类型参数的余弦值。
	20	tan()             求指定double类型参数的正切值。
	21	asin()            求指定double类型参数的反正弦值。
	22	acos()            求指定double类型参数的反余弦值。
	23	atan()            求指定double类型参数的反正切值。
	24	atan2()           将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。
	25	toDegrees()       将参数转化为角度。
	26	toRadians()       将角度转换为弧度。
	27	random()          返回一个随机数。	
		
七、Character字符类
	Character ch = new Character('c');
	Character ch = 'c';
	
	关于Character的方法：
	1	isLetter()        是否是一个字母
	2	isDigit()         是否是一个数字字符
	3	isWhitespace()    是否一个空格
	4	isUpperCase()     是否是大写字母
	5	isLowerCase()     是否是小写字母
	6	toUpperCase()     指定字母的大写形式
	7	toLowerCase()     指定字母的小写形式
	8	toString()        返回字符的字符串形式，字符串的长度仅为1

八、String字符串类
	String greeting = new String("Hello world!");
	String greeting = "Hello world!";
	
	关于String的方法：
	1	char charAt(int index)               返回指定索引处的 char 值。
	2	int compareTo(Object o)              把这个字符串和另一个对象比较。
	3	int compareTo(String anotherString)  按字典顺序比较两个字符串。
	4	int compareToIgnoreCase(String str)  按字典顺序比较两个字符串，不考虑大小写。
	5	String concat(String str)            将指定字符串连接到此字符串的结尾。
	6	boolean contentEquals(StringBuffer sb)           当且仅当字符串与指定的StringButter有相同顺序的字符时候返回真。
	7	static String copyValueOf(char[] data)           返回指定数组中表示该字符序列的 String。
	8	static String copyValueOf(char[] data, int offset, int count)  返回指定数组中表示该字符序列的 String。
	9	boolean endsWith(String suffix)      测试此字符串是否以指定的后缀结束。
	10	boolean equals(Object anObject)      将此字符串与指定的对象比较。
	11	boolean equalsIgnoreCase(String anotherString)   将此 String 与另一个 String 比较，不考虑大小写。
	12	byte[] getBytes()                    使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。
	13	byte[] getBytes(String charsetName)  使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。
	14	void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)         将字符从此字符串复制到目标字符数组。
	15	int hashCode()                        返回此字符串的哈希码。
	16	int indexOf(int ch)                   返回指定字符在此字符串中第一次出现处的索引。
	17	int indexOf(int ch, int fromIndex)    返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。
	18	int indexOf(String str)               返回指定子字符串在此字符串中第一次出现处的索引。
	19	int indexOf(String str, int fromIndex)    返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。
	20	String intern()                       返回字符串对象的规范化表示形式。
	21	int lastIndexOf(int ch)               返回指定字符在此字符串中最后一次出现处的索引。
	22	int lastIndexOf(int ch, int fromIndex) 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。
	23	int lastIndexOf(String str)           返回指定子字符串在此字符串中最右边出现处的索引。
	24	int lastIndexOf(String str, int fromIndex)   返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。
	25	int length()                          返回此字符串的长度。
	26	boolean matches(String regex)         告知此字符串是否匹配给定的正则表达式。
	27	boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)   测试两个字符串区域是否相等。
	28	boolean regionMatches(int toffset, String other, int ooffset, int len)                       测试两个字符串区域是否相等。
	29	String replace(char oldChar, char newChar)          返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。
	30	String replaceAll(String regex, String replacement  使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。
	31	String replaceFirst(String regex, String replacement)  使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。
	32	String[] split(String regex)          根据给定正则表达式的匹配拆分此字符串。
	33	String[] split(String regex, int limit)    根据匹配给定的正则表达式来拆分此字符串。
	34	boolean startsWith(String prefix)           测试此字符串是否以指定的前缀开始。
	35	boolean startsWith(String prefix, int toffset)      测试此字符串从指定索引开始的子字符串是否以指定前缀开始。
	36	CharSequence subSequence(int beginIndex, int endIndex)    返回一个新的字符序列，它是此序列的一个子序列。
	37	String substring(int beginIndex)             返回一个新的字符串，它是此字符串的一个子字符串。
	38	String substring(int beginIndex, int endIndex)    返回一个新字符串，它是此字符串的一个子字符串。
	39	char[] toCharArray()                        将此字符串转换为一个新的字符数组。
	40	String toLowerCase()                        使用默认语言环境的规则将此 String 中的所有字符都转换为小写。
	41	String toLowerCase(Locale locale)            使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。
	42	String toString()                            返回此对象本身（它已经是一个字符串！）。
	43	String toUpperCase()                        使用默认语言环境的规则将此 String 中的所有字符都转换为大写。
	44	String toUpperCase(Locale locale)           使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。
	45	String trim()                                返回字符串的副本，忽略前导空白和尾部空白。
	46	static String valueOf(primitive data type x)  返回给定data type类型x参数的字符串表示形式。
		
八、StringBuffer和StringBuilder类
	StringBuffer sBuffer = new StringBuffer("test")		
	String sBuffer = "test"
	
	关于StringBuffer的方法:
	1	public StringBuffer append(String s)       将指定的字符串追加到此字符序列。
	2	public StringBuffer reverse()              将此字符序列用其反转形式取代。
	3	public delete(int start, int end)          移除此序列的子字符串中的字符。
	4	public insert(int offset, int i)           将 int 参数的字符串表示形式插入此序列中。
	5	replace(int start, int end, String str)    使用给定 String 中的字符替换此序列的子字符串中的字符。
			
九、数组
	dataType[] arrayRefVar;   // 首选的方法
	或
	dataType arrayRefVar[];  // 效果相同，但不是首选方法
		
十、日期时间
	1、时间：Date date = new date();
	
	关于时间的方法：
	1	boolean after(Date date)        若当调用此方法的Date对象在指定日期之后返回true,否则返回false。
	2	boolean before(Date date)       若当调用此方法的Date对象在指定日期之前返回true,否则返回false。
	3	Object clone( )                 返回此对象的副本。
	4	int compareTo(Date date)        比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。
	5	int compareTo(Object obj)       若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。
	6	boolean equals(Object date)     当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。
	7	long getTime( )                 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。
	8	int hashCode( )                 返回此对象的哈希码值。
	9	void setTime(long time)         用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。
	10	String toString( )              转换Date对象为String表示形式，并返回该字符串。	
	
	2、日期： Calendar c = Calendar.getInstance();//默认是当前日期
	
	关于日期的方法：
	Calendar.YEAR	年份
	Calendar.MONTH	月份
	Calendar.DATE	日期
	Calendar.DAY_OF_MONTH	日期，和上面的字段意义完全相同
	Calendar.HOUR	12小时制的小时
	Calendar.HOUR_OF_DAY	24小时制的小时
	Calendar.MINUTE	分钟
	Calendar.SECOND	秒
	Calendar.DAY_OF_WEEK	星期几
	
	Calendar c1 = Calendar.getInstance();
	// 获得年份
	int year = c1.get(Calendar.YEAR);
	// 获得月份
	int month = c1.get(Calendar.MONTH) + 1;
	// 获得日期
	int date = c1.get(Calendar.DATE);
	// 获得小时
	int hour = c1.get(Calendar.HOUR_OF_DAY);
	// 获得分钟
	int minute = c1.get(Calendar.MINUTE);
	// 获得秒
	int second = c1.get(Calendar.SECOND);
	// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）
	int day = c1.get(Calendar.DAY_OF_WEEK);
		
	3、GregorianCalendar类
	Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。 

十一、Java流（Stream）文件（File）和IO
	1、控制台输入：
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in))
		BufferedReader对象创建后，我们便可以使用read()方法从控制台读取一个字符，或者用readLine()方法读取一个字符串。 
		int read( ) throws IOException
	2、控制台输出：
		print()和println()是字节流打印输出。  如： int a = 'c';  println(a) -> 99
		write()是字节流写入字符流中输出。	  如： int a = 'c';  write(a)   -> c
	3、 读写文件：
		如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。
		比较重要的流是FileInputStream和FileInputStream。
		
		-FileInputStream:
			可以使用字符串类型的文件名来创建一个输入流对象来读取文件：
				InputStream f = new FileInputStream("C:/java/hello");
			也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用File()方法来创建一个文件对象：
				File f = new File("C:/java/hello");
				InputStream f = new FileInputStream(f);
		- FileInputStream：
			使用字符串类型的文件名来创建一个输出流对象：
				OutputStream f = new FileOutputStream("C:/java/hello")
			也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：
				File f = new File("C:/java/hello");
				OutputStream f = new FileOutputStream(f);
	4、文件和I/O
		File Class(类)
		FileReader Class(类)
		FileWriter Class(类)
		
	5、java中的目录
		- 创建目录：
		File类中有两个方法可以用来创建文件夹：
			mkdir( )方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。
			mkdirs()方法创建一个文件夹和它的所有父文件夹。
			例子：
				String dirname = "/tmp/user/java/bin";
			    File d = new File(dirname);
			    // 现在创建目录
			    d.mkdirs();
		
		- 读取目录
			 一个目录其实就是一个File对象，它包含其他文件和文件夹。
			如果创建一个File对象并且它是一个目录，那么调用isDirectory( )方法会返回true。
			可以通过调用该对象上的list()方法，来提取它包含的文件和文件夹的列表。 

十二、异常处理
	异常发生的原因有很多，通常包含以下几大类：
		用户输入了非法数据。
		要打开的文件不存在。
		网络通信时连接中断，或者JVM内存溢出。
		
	1、Exception类的层次
		所有的异常类是从java.lang.Exception类继承的子类。 
	
	2、捕获异常
		使用try和catch关键字可以捕获异常。try/catch代码块放在异常可能发生的地方。 
		try
		{
		   // 程序代码
		}catch(ExceptionName e1)
		{
		   //Catch 块
		}
	3、多重捕获	
		一个try代码块后面跟随多个catch代码块的情况就叫多重捕获。 
		try{
		   // 程序代码
		}catch(异常类型1 异常的变量名1){
		   // 程序代码
		}catch(异常类型2 异常的变量名2){
		   // 程序代码
		}catch(异常类型2 异常的变量名2){
		   // 程序代码
		}
	4、throws/throw关键字
		如果一个方法没有捕获一个检查异常，那么该方法必须使用throws关键字声明。throws关键字放在方法签名的尾部。 
	5、finally关键字
		finally关键字用来创建在try代码块后面执行的代码块。

		无论是否发生异常，finally代码块中的代码总会被执行。 


		
		